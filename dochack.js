/* Generated by the Nim Compiler v0.19.9 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI42032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI196074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI45862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI198577 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI82448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI82283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI82281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI82227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI82565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI82563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI82561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI82231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI82229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI84305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI45850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI42006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI61156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI45808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45914 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI42016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI42040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI42042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI45908 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI45826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI45846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45846.node = NNI45846;
var NNI45842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45842.node = NNI45842;
var NNI45828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45828.node = NNI45828;
NTI45908.base = NTI45826;
NTI45914.base = NTI45826;
var NNI45826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI45908, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI42042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI42040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI42040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI42016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI45914, name: "up", sons: null}]};
NTI45826.node = NNI45826;
var NNI45808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45808.node = NNI45808;
NTI45826.base = NTI45808;
NTI45828.base = NTI45826;
NTI45842.base = NTI45828;
NTI45846.base = NTI45842;
var NNI61156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI42042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI42006, name: "Field1", sons: null}]};
NTI61156.node = NNI61156;
var NNI45858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45858.node = NNI45858;
NTI45858.base = NTI45828;
var NNI45850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45850.node = NNI45850;
NTI45850.base = NTI45828;
NTI82561.base = NTI82229;
NTI82563.base = NTI82229;
NTI82565.base = NTI82229;
var NNI82227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI82227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI82227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI82227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI82227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI82227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI82227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI82227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI82227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI82227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI82227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI82227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI82227, name: "NotationNode", len: 0, sons: null}}};
NTI82227.node = NNI82227;
var NNI82283 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI42042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI42042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI42042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI42042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI42042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI42042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI42042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI42042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI42042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI42042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI42042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI42042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI42042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI42042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI42042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI42042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI42042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI42042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI42042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI42042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI42042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI42042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI42042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI42042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI42042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI42042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI42042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI42042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI42042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI42042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI42042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI42042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI42042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI42042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI42042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI42042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI42042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI42042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI42042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI42042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI42042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI42042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI42042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI42042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI42042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI42042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI42042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI42042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI42042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI42042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI42042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI42042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI42042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI42042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI42042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI42042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI42042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI42042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI42042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI42042, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI42042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI42042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI42042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI42042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI42042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI42042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI42042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI42042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI42042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI42042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI42042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI42042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI42042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI42042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI42042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI42042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI42042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI42042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI42042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI42042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI42042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI42042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI42042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI42042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI42042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI42042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI42042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI42042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI42042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI42042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI42006, name: "zIndex", sons: null}]};
NTI82283.node = NNI82283;
NTI82283.base = NTI45808;
NTI82281.base = NTI82283;
var NNI82231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI82561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI82563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI82565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI42042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI82229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI82229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI82229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI42042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI82227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI42042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI82229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI82229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI42042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI82281, name: "style", sons: null}]};
NTI82231.node = NNI82231;
var NNI82205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI82372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI82376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI82380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI82384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI82388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI82392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI82396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI82400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI82404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI82408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI82412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI82416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI82420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI82424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI82428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI82432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI82436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI82440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI82444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI82448, name: "onunload", sons: null}]};
NTI82205.node = NNI82205;
NTI82205.base = NTI45808;
NTI82231.base = NTI82205;
NTI82229.base = NTI82231;
NTI84305.base = NTI82229;
NTI198577.base = NTI42042;
var NNI45862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45862.node = NNI45862;
NTI45862.base = NTI45828;
var NNI196074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI42006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI42032, name: "Field1", sons: null}]};
NTI196074.node = NNI196074;

function makeNimstrLit(c_63058) {
		  var ln = c_63058.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_63058.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_64027, src_64028, ti_64029) {
	var result_64219 = null;

		switch (ti_64029.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_64001(ti_64029))) {
			result_64219 = src_64028;
			}
			else {
				result_64219 = [src_64028[0], src_64028[1]];
			}
			
			break;
		case 19:
			      if (dest_64027 === null || dest_64027 === undefined) {
        dest_64027 = {};
      }
      else {
        for (var key in dest_64027) { delete dest_64027[key]; }
      }
      for (var key in src_64028) { dest_64027[key] = src_64028[key]; }
      result_64219 = dest_64027;
    
			break;
		case 18:
		case 17:
			if (!((ti_64029.base == null))) {
			result_64219 = nimCopy(dest_64027, src_64028, ti_64029.base);
			}
			else {
			if ((ti_64029.kind == 17)) {
			result_64219 = (dest_64027 === null || dest_64027 === undefined) ? {m_type: ti_64029} : dest_64027;
			}
			else {
				result_64219 = (dest_64027 === null || dest_64027 === undefined) ? {} : dest_64027;
			}
			}
			nimCopyAux(result_64219, src_64028, ti_64029.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_64028 === null) {
        result_64219 = null;
      }
      else {
        if (dest_64027 === null || dest_64027 === undefined) {
          dest_64027 = new Array(src_64028.length);
        }
        else {
          dest_64027.length = src_64028.length;
        }
        result_64219 = dest_64027;
        for (var i = 0; i < src_64028.length; ++i) {
          result_64219[i] = nimCopy(result_64219[i], src_64028[i], ti_64029.base);
        }
      }
    
			break;
		case 28:
			      if (src_64028 !== null) {
        result_64219 = src_64028.slice(0);
      }
    
			break;
		default: 
			result_64219 = src_64028;
			break;
		}

	return result_64219;

}

function arrayConstr(len_64286, value_64287, typ_64288) {
		    var result = new Array(len_64286);
    for (var i = 0; i < len_64286; ++i) result[i] = nimCopy(null, value_64287, typ_64288);
    return result;
  

	
}

function cstrToNimstr(c_63075) {
		  var ln = c_63075.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_63075.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_63075.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_63092) {
		  if (s_63092 === null) return "";
  var len = s_63092.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_63092[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_63092[i] < 128)
      asciiPart[i] = fcc(s_63092[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_61618, ename_61619) {
		e_61618.name = ename_61619;
		if ((excHandler == 0)) {
		unhandledException(e_61618);
		}
		
		e_61618.trace = nimCopy(null, raw_write_stack_trace_61468(), NTI42040);
		throw e_61618;

	
}

function addInt(a_63403, b_63404) {
		    var result = a_63403 + b_63404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_64305, a_64306, b_64307) {
			var Tmp1;

	var result_64308 = 0;

	BeforeRet: do {
			if (!(a_64306 <= i_64305)) Tmp1 = false; else {				Tmp1 = (i_64305 <= b_64307);			}		if (Tmp1) {
		result_64308 = i_64305;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_64305, a_64306, b_64307);
		}
		
	} while (false);

	return result_64308;

}

function subInt(a_63421, b_63422) {
		    var result = a_63421 - b_63422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_64324, a_64325, b_64326) {
			var Tmp1;

	var result_64327 = 0;

	BeforeRet: do {
			if (!(a_64325 <= i_64324)) Tmp1 = false; else {				Tmp1 = (i_64324 <= b_64326);			}		if (Tmp1) {
		result_64327 = i_64324;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_64327;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_63439, b_63440) {
		    var result = a_63439 * b_63440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_63758, b_63759) {
		var Tmp1;

	var result_63760 = 0;

	BeforeRet: do {
		if ((b_63759 <= a_63758)) {
		Tmp1 = a_63758;
		}
		else {
		Tmp1 = b_63759;
		}
		
		result_63760 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_63760;

}

function nimMin(a_63740, b_63741) {
		var Tmp1;

	var result_63742 = 0;

	BeforeRet: do {
		if ((a_63740 <= b_63741)) {
		Tmp1 = a_63740;
		}
		else {
		Tmp1 = b_63741;
		}
		
		result_63742 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_63742;

}
var nim_program_result = 0;
var global_raise_hook_58618 = [null];
var local_raise_hook_58623 = [null];
var out_of_mem_hook_58626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_198315 = [null];

function is_fat_pointer_64001(ti_64003) {
	var result_64004 = false;

	BeforeRet: do {
		result_64004 = !((ConstSet1[ti_64003.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_64004;

}

function nimCopyAux(dest_64032, src_64033, n_64035) {
		switch (n_64035.kind) {
		case 0:
			break;
		case 1:
			      dest_64032[n_64035.offset] = nimCopy(dest_64032[n_64035.offset], src_64033[n_64035.offset], n_64035.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_64035.sons.length; i++) {
      nimCopyAux(dest_64032, src_64033, n_64035.sons[i]);
    }
    
			break;
		case 3:
			      dest_64032[n_64035.offset] = nimCopy(dest_64032[n_64035.offset], src_64033[n_64035.offset], n_64035.typ);
      for (var i = 0; i < n_64035.sons.length; ++i) {
        nimCopyAux(dest_64032, src_64033, n_64035.sons[i][1]);
      }
    
			break;
		}

	
}

function add_58638(x_58641, x_58641_Idx, y_58642) {
		      if (x_58641[x_58641_Idx] === null) { x_58641[x_58641_Idx] = []; }
      var off = x_58641[x_58641_Idx].length;
      x_58641[x_58641_Idx].length += y_58642.length;
      for (var i = 0; i < y_58642.length; ++i) {
        x_58641[x_58641_Idx][off+i] = y_58642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_61151(f_61153) {
					var Tmp3;

	var result_61154 = [null];

		var it_61162 = f_61153;
		var i_61164 = 0;
		var total_61166 = 0;
		var temp_frames_61173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI61156);
		L1: do {
				L2: while (true) {
					if (!!((it_61162 == null))) Tmp3 = false; else {						Tmp3 = (i_61164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_61173[i_61164].Field0 = it_61162.procname;
					temp_frames_61173[i_61164].Field1 = it_61162.line;
					i_61164 += 1;
					total_61166 += 1;
					it_61162 = it_61162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_61162 == null))) break L5;
					total_61166 += 1;
					it_61162 = it_61162.prev;
				}
		} while(false);
		result_61154[0] = nimCopy(null, [], NTI42040);
		if (!((total_61166 == i_61164))) {
		if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(makeNimstrLit("(")); } else { result_61154[0] = makeNimstrLit("("); };
		if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(cstrToNimstr(((total_61166 - i_61164))+"")); } else { result_61154[0] = cstrToNimstr(((total_61166 - i_61164))+"").slice(); };
		if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_61154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_61421 = 0;
			var colontmp__198456 = 0;
			colontmp__198456 = (i_61164 - 1);
			var res_198461 = colontmp__198456;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_198461)) break L8;
						j_61421 = res_198461;
						add_58638(result_61154, 0, temp_frames_61173[j_61421].Field0);
						if ((0 < temp_frames_61173[j_61421].Field1)) {
						if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(makeNimstrLit(", line: ")); } else { result_61154[0] = makeNimstrLit(", line: "); };
						if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(cstrToNimstr((temp_frames_61173[j_61421].Field1)+"")); } else { result_61154[0] = cstrToNimstr((temp_frames_61173[j_61421].Field1)+"").slice(); };
						}
						
						if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(makeNimstrLit("\x0A")); } else { result_61154[0] = makeNimstrLit("\x0A"); };
						res_198461 -= 1;
					}
			} while(false);
		} while(false);

	return result_61154[0];

}

function raw_write_stack_trace_61468() {
	var result_61470 = null;

		if (!((framePtr == null))) {
		result_61470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_61151(framePtr) || []), NTI42040);
		}
		else {
			result_61470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI42040);
		}
		

	return result_61470;

}

function unhandledException(e_61529) {
		var buf_61530 = [[]];
		if (!(((e_61529.message != null ? e_61529.message.length : 0) == 0))) {
		if (buf_61530[0] != null) { buf_61530[0] = (buf_61530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_61530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_61530[0] != null) { buf_61530[0] = (buf_61530[0]).concat(e_61529.message); } else { buf_61530[0] = e_61529.message.slice(); };
		}
		else {
		if (buf_61530[0] != null) { buf_61530[0] = (buf_61530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_61530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_61530[0] != null) { buf_61530[0] = (buf_61530[0]).concat(makeNimstrLit(" [")); } else { buf_61530[0] = makeNimstrLit(" ["); };
		add_58638(buf_61530, 0, e_61529.name);
		if (buf_61530[0] != null) { buf_61530[0] = (buf_61530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_61530[0] = makeNimstrLit("]\x0A"); };
		if (buf_61530[0] != null) { buf_61530[0] = (buf_61530[0]).concat(raw_write_stack_trace_61468()); } else { buf_61530[0] = raw_write_stack_trace_61468().slice(); };
		var cbuf_61601 = toJSStr(buf_61530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_61601);
  }
  else {
    throw cbuf_61601;
  }
  

	
}

function raiseOverflow() {
		var e_62046 = null;
		e_62046 = {m_type: NTI45846, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_62046.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI42040);
		e_62046.parent = null;
		raiseException(e_62046, "OverflowError");

	
}

function is_whitespace_197654(text_197656) {
		     return !/[^\s]/.test(text_197656);
  

	
}

function is_whitespace_197671(x_197673) {
		var Tmp1;
		var Tmp2;

	var result_197674 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_197673.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_197654(x_197673.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_197673.nodeName == "#comment");		}		result_197674 = Tmp1;
	framePtr = F.prev;

	return result_197674;

}

function raiseIndexError(i_62643, a_62644, b_62645) {
		var e_62649 = null;
		e_62649 = {m_type: NTI45858, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_62649.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_62643)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_62644)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_62645)+"") || []), NTI42040);
		e_62649.parent = null;
		raiseException(e_62649, "IndexError");

	
}

function to_toc_197688(x_197690, father_197691) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_197690.nodeName == "UL")) {
		F.line = 139;
		var f_197710 = {heading: null, kids: [], sortId: (father_197691.kids != null ? father_197691.kids.length : 0), doSort: false};
		F.line = 140;
		var i_197712 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_197712 < x_197690.childNodes.length)) break L2;
					F.line = 142;
					var nxt_197713 = addInt(i_197712, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_197713 < x_197690.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_197671(x_197690.childNodes[nxt_197713]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_197713 = addInt(nxt_197713, 1);
							}
					} while(false);
						if (!(nxt_197713 < x_197690.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_197690.childNodes[i_197712].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_197690.childNodes[i_197712].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_197690.childNodes[nxt_197713].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_197738 = {heading: x_197690.childNodes[i_197712].childNodes[0], kids: [], sortId: (f_197710.kids != null ? f_197710.kids.length : 0), doSort: false};
					F.line = 148;
					var it_197739 = x_197690.childNodes[nxt_197713];
					L9: do {
						F.line = 149;
						var j_197747 = 0;
						F.line = 2638;
						var colontmp__198432 = 0;
						F.line = 149;
						colontmp__198432 = it_197739.childNodes.length;
						F.line = 2639;
						var i_198433 = 0;
						L10: do {
							F.line = 2640;
								L11: while (true) {
								if (!(i_198433 < colontmp__198432)) break L11;
									F.line = 149;
									j_197747 = i_198433;
									F.line = 150;
									to_toc_197688(it_197739.childNodes[j_197747], e_197738);
									F.line = 2642;
									i_198433 = addInt(i_198433, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_197710.kids != null) { f_197710.kids.push(e_197738); } else { f_197710.kids = [e_197738]; };
					F.line = 152;
					i_197712 = addInt(nxt_197713, 1);
					}
					else {
						F.line = 154;
						to_toc_197688(x_197690.childNodes[i_197712], f_197710);
						F.line = 155;
						i_197712 = addInt(i_197712, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_197691.kids != null) { father_197691.kids.push(f_197710); } else { father_197691.kids = [f_197710]; };
		}
		else {
		if (is_whitespace_197671(x_197690)) {
		}
		else {
		if ((x_197690.nodeName == "LI")) {
		F.line = 160;
		var idx_197782 = [];
		L12: do {
			F.line = 161;
			var i_197790 = 0;
			F.line = 2638;
			var colontmp__198437 = 0;
			F.line = 161;
			colontmp__198437 = x_197690.childNodes.length;
			F.line = 2639;
			var i_198438 = 0;
			L13: do {
				F.line = 2640;
					L14: while (true) {
					if (!(i_198438 < colontmp__198437)) break L14;
						F.line = 161;
						i_197790 = i_198438;
						if (!(is_whitespace_197671(x_197690.childNodes[i_197790]))) {
						F.line = 162;
						if (idx_197782 != null) { idx_197782.push(i_197790); } else { idx_197782 = [i_197790]; };
						}
						
						F.line = 2642;
						i_198438 = addInt(i_198438, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_197782 != null ? idx_197782.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_197690.childNodes[idx_197782[chckIndx(1, 0, idx_197782.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_197821 = {heading: x_197690.childNodes[idx_197782[chckIndx(0, 0, idx_197782.length+0-1)-0]], kids: [], sortId: (father_197691.kids != null ? father_197691.kids.length : 0), doSort: false};
		F.line = 166;
		var it_197822 = x_197690.childNodes[idx_197782[chckIndx(1, 0, idx_197782.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_197830 = 0;
			F.line = 2638;
			var colontmp__198443 = 0;
			F.line = 167;
			colontmp__198443 = it_197822.childNodes.length;
			F.line = 2639;
			var i_198444 = 0;
			L17: do {
				F.line = 2640;
					L18: while (true) {
					if (!(i_198444 < colontmp__198443)) break L18;
						F.line = 167;
						j_197830 = i_198444;
						F.line = 168;
						to_toc_197688(it_197822.childNodes[j_197830], e_197821);
						F.line = 2642;
						i_198444 = addInt(i_198444, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_197691.kids != null) { father_197691.kids.push(e_197821); } else { father_197691.kids = [e_197821]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_197845 = 0;
				F.line = 2638;
				var colontmp__198448 = 0;
				F.line = 171;
				colontmp__198448 = x_197690.childNodes.length;
				F.line = 2639;
				var i_198449 = 0;
				L20: do {
					F.line = 2640;
						L21: while (true) {
						if (!(i_198449 < colontmp__198448)) break L21;
							F.line = 171;
							i_197845 = i_198449;
							F.line = 172;
							to_toc_197688(x_197690.childNodes[i_197845], father_197691);
							F.line = 2642;
							i_198449 = addInt(i_198449, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_197691.kids != null) { father_197691.kids.push({heading: x_197690, kids: [], sortId: (father_197691.kids != null ? father_197691.kids.length : 0), doSort: false}); } else { father_197691.kids = [{heading: x_197690, kids: [], sortId: (father_197691.kids != null ? father_197691.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_197339(x_197341, heading_197342, items_197345, items_197345_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_197341 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_197341.heading == null))) Tmp1 = false; else {				Tmp1 = (x_197341.heading.textContent == heading_197342);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_197374 = 0;
			F.line = 2638;
			var colontmp__198473 = 0;
			F.line = 83;
			colontmp__198473 = (x_197341.kids != null ? x_197341.kids.length : 0);
			F.line = 2639;
			var i_198474 = 0;
			L3: do {
				F.line = 2640;
					L4: while (true) {
					if (!(i_198474 < colontmp__198473)) break L4;
						F.line = 83;
						i_197374 = i_198474;
						F.line = 84;
						if (items_197345[items_197345_Idx] != null) { items_197345[items_197345_Idx].push(x_197341.kids[chckIndx(i_197374, 0, x_197341.kids.length+0-1)-0].heading); } else { items_197345[items_197345_Idx] = [x_197341.kids[chckIndx(i_197374, 0, x_197341.kids.length+0-1)-0].heading]; };
						F.line = 2642;
						i_198474 = addInt(i_198474, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_197394 = 0;
				F.line = 2638;
				var colontmp__198478 = 0;
				F.line = 86;
				colontmp__198478 = (x_197341.kids != null ? x_197341.kids.length : 0);
				F.line = 2639;
				var i_198479 = 0;
				L6: do {
					F.line = 2640;
						L7: while (true) {
						if (!(i_198479 < colontmp__198478)) break L7;
							F.line = 86;
							i_197394 = i_198479;
							F.line = 87;
							var it_197395 = x_197341.kids[chckIndx(i_197394, 0, x_197341.kids.length+0-1)-0];
							F.line = 88;
							extract_items_197339(it_197395, heading_197342, items_197345, items_197345_Idx);
							F.line = 2642;
							i_198479 = addInt(i_198479, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_197020(tag_197022, kids_197024) {
	var result_197025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_197025 = document.createElement(toJSStr(tag_197022));
		L1: do {
			F.line = 12;
			var k_197056 = null;
			F.line = 3;
			var i_198496 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_198496 < (kids_197024 != null ? kids_197024.length : 0))) break L3;
						F.line = 12;
						k_197056 = kids_197024[chckIndx(i_198496, 0, kids_197024.length+0-1)-0];
						F.line = 13;
						result_197025.appendChild(k_197056);
						F.line = 6;
						i_198496 = addInt(i_198496, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_197025;

}

function text_197152(s_197154) {
	var result_197155 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_197155 = document.createTextNode(s_197154);
	framePtr = F.prev;

	return result_197155;

}

function sys_fatal_55862(message_55866) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../lib/system/fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_56007 = null;
		F.line = 37;
		e_56007 = {m_type: NTI45850, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_56007.message = nimCopy(null, message_55866, NTI42040);
		F.line = 39;
		raiseException(e_56007, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_55858(msg_55860) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_55862(msg_55860);
	framePtr = F.prev;

	
}

function failed_assert_impl_56055(msg_56057) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_55858(msg_56057);
	framePtr = F.prev;

	
}

function uncovered_197940(x_197942) {
			var Tmp1;
		var Tmp2;

	var result_197943 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_197942.kids != null ? x_197942.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_197942.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_197942.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_197942;
		}
		else {
		Tmp2 = null;
		}
		
		result_197943 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_197943 = {heading: x_197942.heading, kids: [], sortId: x_197942.sortId, doSort: x_197942.doSort};
		L3: do {
			F.line = 197;
			var i_197982 = 0;
			F.line = 2638;
			var colontmp__198508 = 0;
			F.line = 197;
			colontmp__198508 = (x_197942.kids != null ? x_197942.kids.length : 0);
			F.line = 2639;
			var i_198509 = 0;
			L4: do {
				F.line = 2640;
					L5: while (true) {
					if (!(i_198509 < colontmp__198508)) break L5;
						F.line = 197;
						i_197982 = i_198509;
						F.line = 198;
						var y_197983 = uncovered_197940(x_197942.kids[chckIndx(i_197982, 0, x_197942.kids.length+0-1)-0]);
						if (!((y_197983 == null))) {
						F.line = 199;
						if (result_197943.kids != null) { result_197943.kids.push(y_197983); } else { result_197943.kids = [y_197983]; };
						}
						
						F.line = 2642;
						i_198509 = addInt(i_198509, 1);
					}
			} while(false);
		} while(false);
		if (((result_197943.kids != null ? result_197943.kids.length : 0) == 0)) {
		F.line = 200;
		result_197943 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_197943;

}

function merge_tocs_198017(orig_198019, news_198020) {
	var result_198021 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_198021 = uncovered_197940(orig_198019);
		if ((result_198021 == null)) {
		F.line = 205;
		result_198021 = news_198020;
		}
		else {
			L1: do {
				F.line = 207;
				var i_198042 = 0;
				F.line = 2638;
				var colontmp__198502 = 0;
				F.line = 207;
				colontmp__198502 = (news_198020.kids != null ? news_198020.kids.length : 0);
				F.line = 2639;
				var i_198503 = 0;
				L2: do {
					F.line = 2640;
						L3: while (true) {
						if (!(i_198503 < colontmp__198502)) break L3;
							F.line = 207;
							i_198042 = i_198503;
							F.line = 208;
							if (result_198021.kids != null) { result_198021.kids.push(news_198020.kids[chckIndx(i_198042, 0, news_198020.kids.length+0-1)-0]); } else { result_198021.kids = [news_198020.kids[chckIndx(i_198042, 0, news_198020.kids.length+0-1)-0]]; };
							F.line = 2642;
							i_198503 = addInt(i_198503, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_198021;

}

function build_toc_198063(orig_198065, types_198067, procs_198068) {
	var result_198069 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_198083 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_198214 = null;
			F.line = 156;
			var i_198491 = 0;
			F.line = 157;
			var l_198492 = (types_198067 != null ? types_198067.length : 0);
			L2: do {
				F.line = 158;
					L3: while (true) {
					if (!(i_198491 < l_198492)) break L3;
						F.line = 212;
						t_198214 = types_198067[chckIndx(i_198491, 0, types_198067.length+0-1)-0];
						F.line = 213;
						var c_198228 = {heading: t_198214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_198214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_198235 = null;
							F.line = 156;
							var i_198488 = 0;
							F.line = 157;
							var l_198489 = (procs_198068 != null ? procs_198068.length : 0);
							L5: do {
								F.line = 158;
									L6: while (true) {
									if (!(i_198488 < l_198489)) break L6;
										F.line = 215;
										p_198235 = procs_198068[chckIndx(i_198488, 0, procs_198068.length+0-1)-0];
										if (!(p_198235.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_198236 = p_198235.parentNode.getElementsByClassName("attachedType");
										if ((((xx_198236 != null ? xx_198236.length : 0) == 1) && (xx_198236[chckIndx(0, 0, xx_198236.length+0-1)-0].textContent == t_198214.textContent))) {
										F.line = 220;
										var q_198244 = tree_197020(makeNimstrLit("A"), [text_197152(p_198235.title)]);
										F.line = 221;
										q_198244.setAttribute("href", p_198235.getAttribute("href"));
										F.line = 222;
										if (c_198228.kids != null) { c_198228.kids.push({heading: q_198244, kids: [], sortId: 0, doSort: false}); } else { c_198228.kids = [{heading: q_198244, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_198235.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 160;
										i_198488 = addInt(i_198488, 1);
										if (!(((procs_198068 != null ? procs_198068.length : 0) == l_198489))) {
										F.line = 161;
										failed_assert_impl_56055(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_198083.kids != null) { new_stuff_198083.kids.push(c_198228); } else { new_stuff_198083.kids = [c_198228]; };
						F.line = 160;
						i_198491 = addInt(i_198491, 1);
						if (!(((types_198067 != null ? types_198067.length : 0) == l_198492))) {
						F.line = 161;
						failed_assert_impl_56055(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_198069 = merge_tocs_198017(orig_198065, new_stuff_198083);
	framePtr = F.prev;

	return result_198069;

}

function add_197085(parent_197087, kid_197088) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_197087.nodeName == "TR")) Tmp1 = false; else {				if ((kid_197088.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_197088.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_197089 = document.createElement("TD");
		F.line = 19;
		k_197089.appendChild(kid_197088);
		F.line = 20;
		parent_197087.appendChild(k_197089);
		}
		else {
			F.line = 22;
		parent_197087.appendChild(kid_197088);
		}
		
	framePtr = F.prev;

	
}

function set_class_197103(e_197105, value_197106) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_197105.setAttribute("class", toJSStr(value_197106));
	framePtr = F.prev;

	
}

function to_html_197424(x_197426, is_root_197427) {
			var Tmp1;

		function HEX3Aanonymous_197467(a_197469, b_197470) {
					var Tmp1;

			var result_197471 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_197469.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_197470.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_197488 = a_197469.heading.textContent;
				F.line = 107;
				var y_197489 = b_197470.heading.textContent;
				if ((x_197488 < y_197489)) {
				F.line = 108;
				result_197471 = -1;
				break BeforeRet;
				}
				
				if ((y_197489 < x_197488)) {
				F.line = 109;
				result_197471 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_197471 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_197471 = subInt(a_197469.sortId, b_197470.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_197471;

		}

	var result_197428 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_197426 == null)) {
		F.line = 91;
		result_197428 = null;
		break BeforeRet;
		}
		
		if (((x_197426.kids != null ? x_197426.kids.length : 0) == 0)) {
		if ((x_197426.heading == null)) {
		F.line = 93;
		result_197428 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_197428 = x_197426.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_197428 = tree_197020(makeNimstrLit("DIV"), []);
			if (!!((x_197426.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_197426.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_197085(result_197428, x_197426.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_197464 = tree_197020(makeNimstrLit("UL"), []);
		if (is_root_197427) {
		F.line = 100;
		set_class_197103(ul_197464, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_197103(ul_197464, makeNimstrLit("simple"));
		}
		
		if (x_197426.doSort) {
		F.line = 104;
		x_197426.kids.sort(HEX3Aanonymous_197467);
		}
		
		L2: do {
			F.line = 115;
			var k_197614 = null;
			F.line = 154;
			var colontmp__198515 = null;
			F.line = 115;
			colontmp__198515 = x_197426.kids;
			F.line = 156;
			var i_198517 = 0;
			F.line = 157;
			var l_198518 = (colontmp__198515 != null ? colontmp__198515.length : 0);
			L3: do {
				F.line = 158;
					L4: while (true) {
					if (!(i_198517 < l_198518)) break L4;
						F.line = 115;
						k_197614 = colontmp__198515[chckIndx(i_198517, 0, colontmp__198515.length+0-1)-0];
						F.line = 116;
						var y_197615 = to_html_197424(k_197614, false);
						if (!((y_197615 == null))) {
						F.line = 118;
						add_197085(ul_197464, tree_197020(makeNimstrLit("LI"), [y_197615]));
						}
						
						F.line = 160;
						i_198517 = addInt(i_198517, 1);
						if (!(((colontmp__198515 != null ? colontmp__198515.length : 0) == l_198518))) {
						F.line = 161;
						failed_assert_impl_56055(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_197464.childNodes.length == 0))) {
		F.line = 119;
		add_197085(result_197428, ul_197464);
		}
		
		if ((result_197428.childNodes.length == 0)) {
		F.line = 120;
		result_197428 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_197428;

}

function replace_by_id_197172(id_197174, new_tree_197175) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_197176 = document.getElementById(id_197174);
		F.line = 33;
		x_197176.parentNode.replaceChild(new_tree_197175, x_197176);
		F.line = 34;
		new_tree_197175.id = id_197174;
	framePtr = F.prev;

	
}

function togglevis_198329(d_198331) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_198331.style.display == 'none')
      d_198331.style.display = 'inline';
    else
      d_198331.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_198347) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_198348 = document.getElementById("toc-list");
		if ((alternative_198315[0] == null)) {
		F.line = 240;
		var tt_198367 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_197688(toc_198348, tt_198367);
		F.line = 242;
		tt_198367 = tt_198367.kids[chckIndx(0, 0, tt_198367.kids.length+0-1)-0];
		F.line = 244;
		var types_198382 = [[]];
		F.line = 245;
		var procs_198397 = [[]];
		F.line = 247;
		extract_items_197339(tt_198367, "Types", types_198382, 0);
		F.line = 248;
		extract_items_197339(tt_198367, "Procs", procs_198397, 0);
		F.line = 249;
		extract_items_197339(tt_198367, "Converters", procs_198397, 0);
		F.line = 250;
		extract_items_197339(tt_198367, "Methods", procs_198397, 0);
		F.line = 251;
		extract_items_197339(tt_198367, "Templates", procs_198397, 0);
		F.line = 252;
		extract_items_197339(tt_198367, "Macros", procs_198397, 0);
		F.line = 253;
		extract_items_197339(tt_198367, "Iterators", procs_198397, 0);
		F.line = 255;
		var ntoc_198405 = build_toc_198063(tt_198367, types_198382[0], procs_198397[0]);
		F.line = 256;
		var x_198406 = to_html_197424(ntoc_198405, true);
		F.line = 257;
		alternative_198315[0] = tree_197020(makeNimstrLit("DIV"), [x_198406]);
		}
		
		if ((value_198347 == "type")) {
		F.line = 259;
		replace_by_id_197172("tocRoot", alternative_198315[0]);
		}
		else {
			F.line = 261;
		replace_by_id_197172("tocRoot", tree_197020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_198329(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_198521 = [null];
var contents_198523 = [null];
var oldtoc_198959 = [null];
var timer_198960 = [null];

function raiseRangeError() {
		var e_62445 = null;
		e_62445 = {m_type: NTI45862, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_62445.message = nimCopy(null, makeNimstrLit("value out of range"), NTI42040);
		e_62445.parent = null;
		raiseException(e_62445, "RangeError");

	
}

function nsuToLowerAsciiChar(c_185980) {
	var result_185981 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"../../lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_185980] != undefined)) {
		F.line = 222;
		result_185981 = chckRange(addInt(c_185980, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_185981 = c_185980;
		}
		
	framePtr = F.prev;

	return result_185981;

}

function fuzzy_match_196070(pattern_196072, str_196073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_196077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_196078 = -100;
		F.line = 38;
		var header_matched_196079 = false;
		F.line = 39;
		var unmatched_leading_char_count_196081 = 0;
		F.line = 40;
		var consecutive_match_count_196083 = 0;
		F.line = 41;
		var str_index_196085 = 0;
		F.line = 42;
		var pat_index_196087 = 0;
		F.line = 43;
		var score_196089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_196085 < (str_196073 != null ? str_196073.length : 0)) && (pat_index_196087 < (pattern_196072 != null ? pattern_196072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_196096 = nsuToLowerAsciiChar(pattern_196072.charCodeAt(chckIndx(pat_index_196087, 0, pattern_196072.length+0-1)-0));
						F.line = 52;
						var str_char_196097 = nsuToLowerAsciiChar(str_196073.charCodeAt(chckIndx(str_index_196085, 0, str_196073.length+0-1)-0));
						if ((ConstSet3[pattern_char_196096] != undefined)) {
						F.line = 56;
						pat_index_196087 = addInt(pat_index_196087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_196097] != undefined)) {
						F.line = 59;
						str_index_196085 = addInt(str_index_196085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_196079) && (str_char_196097 == 58))) {
						F.line = 65;
						header_matched_196079 = true;
						F.line = 66;
						score_state_196078 = -100;
						F.line = 67;
						score_196089 = Math.trunc(Math.floor((5.0000000000000000e-01 * score_196089)));
						F.line = 68;
						pat_index_196087 = 0;
						F.line = 69;
						str_index_196085 = addInt(str_index_196085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_196097 == pattern_char_196096)) {
						F.line = 73;
						switch (score_state_196078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_196078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_196078 = 5;
							F.line = 78;
							score_196089 = addInt(score_196089, score_state_196078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_196083 = addInt(consecutive_match_count_196083, 1);
							F.line = 82;
							score_state_196078 = 5;
							F.line = 83;
							score_196089 = addInt(score_196089, mulInt(5, consecutive_match_count_196083));
							if ((score_state_196078 == 10)) {
							F.line = 86;
							score_196089 = addInt(score_196089, 10);
							}
							
							F.line = 88;
							var on_boundary_196172 = (pat_index_196087 == (pattern_196072 != null ? (pattern_196072.length-1) : -1));
							if ((!(on_boundary_196172) && (str_index_196085 < (str_196073 != null ? (str_196073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_196173 = nsuToLowerAsciiChar(pattern_196072.charCodeAt(chckIndx(addInt(pat_index_196087, 1), 0, pattern_196072.length+0-1)-0));
							F.line = 92;
							var next_str_char_196174 = nsuToLowerAsciiChar(str_196073.charCodeAt(chckIndx(addInt(str_index_196085, 1), 0, str_196073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_196174] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_196174 == next_pattern_char_196173));							}							on_boundary_196172 = Tmp4;
							}
							
							if (on_boundary_196172) {
							F.line = 100;
							score_state_196078 = 20;
							F.line = 100;
							score_196089 = addInt(score_196089, score_state_196078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_196073.charCodeAt(chckIndx(subInt(str_index_196085, 1), 0, str_196073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_196073.charCodeAt(chckIndx(subInt(str_index_196085, 1), 0, str_196073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_196073.charCodeAt(chckIndx(str_index_196085, 0, str_196073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_196212 = Tmp5;
							if (is_leading_char_196212) {
							F.line = 110;
							score_state_196078 = 10;
							}
							else {
								F.line = 114;
								score_state_196078 = 0;
								F.line = 114;
								score_196089 = addInt(score_196089, score_state_196078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_196087 = addInt(pat_index_196087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_196078) {
							case -100:
								F.line = 120;
								score_state_196078 = -3;
								F.line = 120;
								score_196089 = addInt(score_196089, score_state_196078);
								break;
							case 5:
								F.line = 123;
								score_state_196078 = -1;
								F.line = 123;
								score_196089 = addInt(score_196089, score_state_196078);
								F.line = 124;
								consecutive_match_count_196083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_196081 < 3)) {
								F.line = 128;
								score_state_196078 = -3;
								F.line = 128;
								score_196089 = addInt(score_196089, score_state_196078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_196081 = addInt(unmatched_leading_char_count_196081, 1);
								break;
							default: 
								F.line = 132;
								score_state_196078 = -1;
								F.line = 132;
								score_196089 = addInt(score_196089, score_state_196078);
								break;
							}
						}
						
						F.line = 134;
						str_index_196085 = addInt(str_index_196085, 1);
					} while(false);
				}
		} while(false);
		F.line = 137;
		var colontmp__199063 = nimMax(0, score_196089);
		F.line = 138;
		var colontmp__199064 = (0 < score_196089);
		F.line = 136;
		nimCopy(result_196077, {Field0: colontmp__199063, Field1: colontmp__199064}, NTI196074);
	framePtr = F.prev;

	return result_196077;

}

function text_197120(s_197122) {
	var result_197123 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_197123 = document.createTextNode(toJSStr(s_197122));
	framePtr = F.prev;

	return result_197123;

}

function dosearch_198555(value_198557) {

		function HEX3Aanonymous_198871(a_198880, b_198881) {
			var result_198885 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_198885 = subInt(b_198881["Field1"], a_198880["Field1"]);
			framePtr = F.prev;

			return result_198885;

		}

	var result_198558 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_198521[0] != null ? db_198521[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_198564 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_198564 = doc.documentElement;
    
		F.line = 286;
		db_198521[0] = nimCopy(null, stuff_198564.getElementsByClassName("reference"), NTI84305);
		F.line = 287;
		contents_198523[0] = nimCopy(null, [], NTI198577);
		L1: do {
			F.line = 288;
			var ahref_198814 = null;
			F.line = 156;
			var i_199043 = 0;
			F.line = 157;
			var l_199044 = (db_198521[0] != null ? db_198521[0].length : 0);
			L2: do {
				F.line = 158;
					L3: while (true) {
					if (!(i_199043 < l_199044)) break L3;
						F.line = 288;
						ahref_198814 = db_198521[0][chckIndx(i_199043, 0, db_198521[0].length+0-1)-0];
						F.line = 289;
						if (contents_198523[0] != null) { contents_198523[0].push(ahref_198814.getAttribute("data-doc-search-tag")); } else { contents_198523[0] = [ahref_198814.getAttribute("data-doc-search-tag")]; };
						F.line = 160;
						i_199043 = addInt(i_199043, 1);
						if (!(((db_198521[0] != null ? db_198521[0].length : 0) == l_199044))) {
						F.line = 161;
						failed_assert_impl_56055(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_198825 = tree_197020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_198558 = tree_197020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_197103(result_198558, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_198844 = [];
		L4: do {
			F.line = 294;
			var i_198857 = 0;
			F.line = 2638;
			var colontmp__199050 = 0;
			F.line = 294;
			colontmp__199050 = (db_198521[0] != null ? db_198521[0].length : 0);
			F.line = 2639;
			var i_199051 = 0;
			L5: do {
				F.line = 2640;
					L6: while (true) {
					if (!(i_199051 < colontmp__199050)) break L6;
						F.line = 294;
						i_198857 = i_199051;
						L7: do {
							F.line = 295;
							var c_198858 = contents_198523[0][chckIndx(i_198857, 0, contents_198523[0].length+0-1)-0];
							if (((c_198858 == "Examples") || (c_198858 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__199060 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_198859 = 0;
							F.line = 301;
							var matched_198860 = false;
							F.line = 301;
							nimCopy(colontmp__199060, fuzzy_match_196070(value_198557, c_198858), NTI196074);
							F.line = 301;
							score_198859 = colontmp__199060["Field0"];
							F.line = 301;
							matched_198860 = colontmp__199060["Field1"];
							if (matched_198860) {
							F.line = 303;
							if (matches_198844 != null) { matches_198844.push({Field0: db_198521[0][chckIndx(i_198857, 0, db_198521[0].length+0-1)-0], Field1: score_198859}); } else { matches_198844 = [{Field0: db_198521[0][chckIndx(i_198857, 0, db_198521[0].length+0-1)-0], Field1: score_198859}]; };
							}
							
						} while(false);
						F.line = 2642;
						i_199051 = addInt(i_199051, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_198844.sort(HEX3Aanonymous_198871);
		L8: do {
			F.line = 306;
			var i_198924 = 0;
			F.line = 2638;
			var colontmp__199056 = 0;
			F.line = 306;
			colontmp__199056 = nimMin((matches_198844 != null ? matches_198844.length : 0), 19);
			F.line = 2639;
			var i_199057 = 0;
			L9: do {
				F.line = 2640;
					L10: while (true) {
					if (!(i_199057 < colontmp__199056)) break L10;
						F.line = 306;
						i_198924 = i_199057;
						F.line = 307;
						matches_198844[chckIndx(i_198924, 0, matches_198844.length+0-1)-0]["Field0"].innerHTML = matches_198844[chckIndx(i_198924, 0, matches_198844.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_197085(ul_198825, tree_197020(makeNimstrLit("LI"), [matches_198844[chckIndx(i_198924, 0, matches_198844.length+0-1)-0]["Field0"]]));
						F.line = 2642;
						i_199057 = addInt(i_199057, 1);
					}
			} while(false);
		} while(false);
		if ((ul_198825.childNodes.length == 0)) {
		F.line = 310;
		add_197085(result_198558, tree_197020(makeNimstrLit("B"), [text_197120(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_197085(result_198558, tree_197020(makeNimstrLit("B"), [text_197120(makeNimstrLit("search results"))]));
			F.line = 313;
			add_197085(result_198558, ul_198825);
		}
		
	framePtr = F.prev;

	return result_198558;

}

function search() {

		function wrapper_198991() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_198993 = document.getElementById("searchInput");
				F.line = 321;
				var value_198994 = elem_198993.value;
				if (!(((value_198994 != null ? value_198994.length : 0) == 0))) {
				if ((oldtoc_198959[0] == null)) {
				F.line = 324;
				oldtoc_198959[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_199000 = dosearch_198555(value_198994);
				F.line = 326;
				replace_by_id_197172("tocRoot", results_199000);
				}
				else {
				if (!((oldtoc_198959[0] == null))) {
				F.line = 328;
				replace_by_id_197172("tocRoot", oldtoc_198959[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_198960[0] == null))) {
		F.line = 330;
		clearTimeout(timer_198960[0]);
		}
		
		F.line = 331;
		timer_198960[0] = setTimeout(wrapper_198991, 400);
	framePtr = F.prev;

	
}
